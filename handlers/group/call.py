from aiogram import Router, F
from aiogram.types import Message, ChatMemberUpdated
from aiogram.enums.chat_member_status import ChatMemberStatus
from storage.json_helpers import read_json, write_json
from aiogram.enums.chat_type import ChatType
from config import DATA_FILES
from datetime import datetime
import pytz

router = Router()
router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))


# Bot greets after being added to a group
@router.my_chat_member()
async def bot_added(event: ChatMemberUpdated):
    old_status = event.old_chat_member.status
    new_status = event.new_chat_member.status

    if old_status in {ChatMemberStatus.LEFT, ChatMemberStatus.KICKED} and \
            new_status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR}:

        # Print to terminal
        print("ü§ñ Bot added to a group.")
        print(f"üÜî Group Chat ID: {event.chat.id}")
        print(f"üë§ Admin/User ID: {event.from_user.id}")

        await event.bot.send_message(
            chat_id=event.chat.id,
            text=(
                "üëãüèº –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì <b>Shaqyrshy Bot</b>.\n\n"
                "üì£ <b>/call</b> ‚Äì –ü—Ä–∏–∑–≤–∞—Ç—å –≤—Å–µ—Ö\n"
                "üìÖ <b>/schedule</b> ‚Äì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                "üìÅ <b>/deadlines</b> ‚Äì –î–µ–¥–ª–∞–π–Ω—ã\n"
                "üéì <b>/exams</b> ‚Äì –†—É–±–µ–∂–∫–∏\–°–µ—Å—Å–∏–∏ \n"
                "üó£ –¢–∞–∫–∂–µ –æ—Ç–∑–æ–≤—É—Å—å –Ω–∞ —Å–ª–æ–≤–∞ ¬´—à–∞–∫—ã—Ä—à¬ª, ¬´—à–∞“õ—ã—Ä—à—ã¬ª\n\n"
                "<i>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äì –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–æ–≤—Ä–µ–º—è —Å–æ–æ–±—â–∞—Ç—å.</i>"
            ),
            parse_mode="HTML"
        )


# /call ‚Äî mentions each member in group
@router.message(F.text.startswith("/call"))
async def call_everyone(message: Message):
    members = await message.chat.get_administrators()
    bot_user = await message.bot.get_me()

    mentions = []
    for member in members:
        user = member.user
        if user.id == bot_user.id:
            continue  # Skip the bot itself

        if user.username:
            mentions.append(f"@{user.username}")
        else:
            name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            mentions.append(f"<a href='tg://user?id={user.id}'>{name}</a>")

    if not mentions:
        await message.answer("‚ùå –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞.")
        return

    await message.answer("üì£ –ü—Ä–∏–∑—ã–≤: " + " ".join(mentions), parse_mode="HTML")


# Responds to trigger words like "shaqyrshy"
@router.message(
    F.text,
    F.text.func(lambda text: not text.startswith("/") and any(word in text.lower() for word in {
        "—à–∞–∫—ã—Ä—à", "—à–∞“õ—ã—Ä—à—ã", "—à–∞“õ—ã—Ä—à", "shaqyrshy",
        "—à–∞“õ—ã—Ä", "shaqyrsh"
    }))
)
async def call_keyword_trigger(message: Message):
    members = await message.chat.get_administrators()
    bot_user = await message.bot.get_me()
    mentions = []

    for member in members:
        user = member.user
        if user.id == bot_user.id:
            continue  # Skip the bot

        if user.username:
            mentions.append(f"@{user.username}")
        else:
            name = user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            mentions.append(f"<a href='tg://user?id={user.id}'>{name}</a>")

    await message.answer("–ë—ñ—Ä–µ—É —à–∞“õ—ã—Ä—ã–ø –∂–∞—Ç—ã—Ä üëÄ \n" + " ".join(mentions), parse_mode="HTML")


# /schedule ‚Äî shows whole schedule
@router.message(F.text.regexp(r"^/schedule(@\w+)?$"))
async def show_schedule(message: Message):
    data = read_json(DATA_FILES["schedule"])
    if not data:
        await message.answer("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        return

    weekday_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    grouped = {day: [] for day in weekday_order}

    # groups by week days
    for item in data:
        day = item["day"].strip().capitalize()
        if day in grouped:
            grouped[day].append(item)
        else:
            grouped.setdefault("–ü—Ä–æ—á–µ–µ", []).append(item)

    # sorts by start time
    for day in grouped:
        grouped[day].sort(
            key=lambda x: datetime.strptime(
                x["time"].replace("‚Äî", "-").split("-")[0].strip(),
                "%H:%M"
            )
        )

    # builds respond
    text = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"
    for day in weekday_order:
        items = grouped.get(day, [])
        if items:
            text += f"<b>{day}</b>\n\n"
            for item in items:
                text += f"  ‚Ä¢ <b>{item['subject']}</b>: {item['time']} ({item['room']})\n"
            text += "\n"

    if "–ü—Ä–æ—á–µ–µ" in grouped:
        text += "<b>–î—Ä—É–≥–∏–µ –¥–Ω–∏</b>\n"
        for item in grouped["–ü—Ä–æ—á–µ–µ"]:
            text += f"<b>{item['subject']}</b>: {item['day']} {item['time']} ({item['room']})\n"

    await message.answer(text.strip(), parse_mode="HTML")


# /deadlines - shows deadlines
@router.message(F.text.regexp(r"^/deadlines(@\w+)?$"))
async def show_deadlines(message: Message):
    data = read_json(DATA_FILES["deadlines"])
    if not data:
        await message.answer("üìÅ –ü–æ–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∏.")
        return

    timezone = pytz.timezone("Asia/Almaty")
    now = datetime.now(timezone)

    updated = []

    for item in data:
        try:
            dt = timezone.localize(datetime.strptime(item["deadline"], "%Y-%m-%d %H:%M"))
            if dt > now:
                left = dt - now
                days, hours = left.days, left.seconds // 3600
                mins = (left.seconds % 3600) // 60
                item["__time_left"] = f"{days}–¥ {hours}—á {mins}–º"
                item["__parsed"] = dt
                updated.append(item)
        except ValueError:
            continue

    if not updated:
        await message.answer("üìÅ –ü–æ–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∏.")
        return

    updated.sort(key=lambda x: x["__parsed"])

    text = "üìÅ <b>–î–µ–¥–ª–∞–π–Ω—ã:</b>\n\n"
    for i in updated:
        link = f" (<a href='{i['link']}'>—Ñ–∞–π–ª</a>)" if i.get("link") and i["link"] != "-" else ""
        text += (
            f"  ‚Ä¢ <b>{i['subject']}</b>: {i['task']}{link} ‚Äì –¥–æ {i['deadline']} "
            f"(<i>{i['__time_left']}</i>)\n"
        )

    await message.answer(text.strip(), parse_mode="HTML", disable_web_page_preview=True)


# /exams ‚Äî shows upcoming exams (midterms/finals), auto-removes expired ones
@router.message(F.text.regexp(r"^/exams(@\w+)?$"))
async def show_exams(message: Message):
    data = read_json(DATA_FILES["exams"])
    if not data:
        await message.answer("üéì –≠–∫–∑–∞–º–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    timezone = pytz.timezone("Asia/Almaty")
    now = datetime.now(timezone)

    exams_midterm = []
    exams_final = []
    expired = []

    for item in data:
        try:
            # parse "2025-09-19 17:00 - 18:00" ‚Üí takes the start datetime
            date_part = item["datetime"].split(" ")[0]
            time_part = item["datetime"].split(" ")[1]
            parsed_dt = timezone.localize(datetime.strptime(f"{date_part} {time_part}", "%Y-%m-%d %H:%M"))
            item["__parsed"] = parsed_dt

            if parsed_dt < now:
                expired.append(item)
                continue

            exam_type = item["type"].strip().lower()
            if "—Ä—É–±–µ–∂" in exam_type or "—Ä—É–±–µ–∫" in exam_type:
                exams_midterm.append(item)
            elif "—Å–µ—Å—Å" in exam_type:
                exams_final.append(item)
        except ValueError:
            continue

    # no upcoming exams left
    if not exams_midterm and not exams_final:
        await message.answer("üéì –ü–æ–∫–∞ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏.")
        return

    # sorts by date
    exams_midterm.sort(key=lambda x: x["__parsed"])
    exams_final.sort(key=lambda x: x["__parsed"])

    text = "üéì <b>–≠–∫–∑–∞–º–µ–Ω—ã:</b>\n\n"

    if exams_midterm:
        text += "<b>üìò –†—É–±–µ–∂–∫–∏:</b>\n"
        for i in exams_midterm:
            text += f" <b>{i['subject']}</b> ‚Äì {i['datetime']} ({i['room']})\n"
        text += "\n"

    if exams_final:
        text += "<b>üìï –°–µ—Å—Å–∏–∏:</b>\n"
        for i in exams_final:
            text += f" <b>{i['subject']}</b> ‚Äì {i['datetime']} ({i['room']})\n"

    await message.answer(text.strip(), parse_mode="HTML")
